
x-common-log-config: &default_log_config
  logging:
    driver: "json-file"
    options:
      max-file: "5"
      max-size: "10m"

x-common-healthcheck-default: &default_healthcheck
  timeout: 45s
  interval: 10s
  retries: 10

x-common-network: &common-network
  networks:
    - ice_lakehouse_dev
    
#################################################################
################    DEFINIÇÃO DOS SERVIÇOS    ###################
#################################################################

services:

  # zookeeper:
  #   image: confluentinc/cp-zookeeper:7.6.0
  #   hostname: zookeeper
  #   container_name: zookeeper
  #   restart: always
  #   <<: *common-network
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #   healthcheck:
  #     test: [ "CMD", "nc", "-z", "zookeeper", "2181" ]
  #     <<: *default_healthcheck
  #   volumes:
  #   - type: volume
  #     source: volume-zookeeper-data
  #     target: /var/lib/zookeeper/data
  #   - type: volume
  #     source: volume-zookeeper-log
  #     target: /var/lib/zookeeper/log
  #   - type: volume
  #     source: volume-zookeeper-secrets
  #     target: /etc/zookeeper/secrets

  # broker:
  #   image: confluentinc/cp-server:7.6.0
  #   hostname: broker
  #   container_name: broker
  #   restart: on-failure
  #   <<: *common-network
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
  #     KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  #     KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #     KAFKA_JMX_PORT: 9101
  #     KAFKA_JMX_HOSTNAME: localhost
  #     KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
  #     CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
  #     CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
  #     CONFLUENT_METRICS_ENABLE: 'true'
  #     CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
  broker:
    image: confluentinc/cp-server:7.6.0
    hostname: broker
    container_name: broker
    <<: *common-network
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: 'broker:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      # Replace CLUSTER_ID with a unique base64 UUID using "bin/kafka-storage.sh random-uuid" 
      # See https://docs.confluent.io/kafka/operations-tools/kafka-tools.html#kafka-storage-sh
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
    volumes:
    - type: volume
      source: volume_broker_1_data
      target: /var/lib/kafka/data
    - type: volume
      source: volume_broker_1_secrets
      target: /etc/kafka/secrets


  schema-registry:
    image: confluentinc/cp-schema-registry:7.6.0
    hostname: schema-registry
    container_name: schema-registry
    restart: always
    depends_on:
      - broker
    <<: *common-network
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_SCHEMA_COMPATIBILITY_LEVEL: FULL


  control-center:
    image: confluentinc/cp-enterprise-control-center:7.6.0
    hostname: control-center
    restart: always
    container_name: control-center
    <<: *common-network
    depends_on:
      - broker
      - schema-registry
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      #CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
      #CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
      #CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021


  redis: 
    image: redis:7.2
    container_name: redis
    <<: *common-network
    command: redis-server --requirepass secret
    ports:
      - "16379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      <<: *default_healthcheck


  topics_creator:
    build: ../../docker/app_layer/onchain-stream-txs
    container_name: topics_creator
    restart: on-failure
    <<: *common-network
    entrypoint: "python -u 0_topics_creator.py configs/topics_dev.ini"
    volumes:
      - ../../docker/app_layer/onchain-stream-txs/src:/app
    env_file:
      - ./conf/dev.secrets.conf
    environment:
      KAFKA_BROKERS: 'broker:29092'
      NETWORK: mainnet
    depends_on:
      - schema-registry


volumes:
  volume_broker_1_data:
  volume_broker_1_secrets:
  volume-zookeeper-data:
  volume-zookeeper-log:
  volume-zookeeper-secrets:
  dm_cluster_dev-scylladb-data:


networks:
  ice_lakehouse_dev:
    name: ice_lakehouse_dev


